n.cores <- parallel::detectCores() - 1
n.cores
ncores <- parallel::detectCores() - 1
ncores <- parallel::detectCores() - 1
my.cluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
print(my.cluster)
doParallel::registerDoParallel(cl = my.cluster)
mycluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
doParallel::registerDoParallel(cl = mycluster)
foreach::getDoParRegistered()
foreach::getDoParWorkers()
doParallel::registerDoParallel(cl = mycluster)
x <- foreach(i = 1:20) %dopar% {
nome_temp(palavras[[i]])
}
nome_temp <- function(tbl){
tabela <- table(tbl)
tabela <- data_frame(palavra = names(tabela), contagem = as.numeric(tabela))
tabela <- as.data.frame(t(tabela))
names(tabela) <- tabela[1,]
tabela <- tabela[-1,]
tabela <- data_frame(tabela)
}
ncores <- parallel::detectCores() - 1
mycluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
doParallel::registerDoParallel(cl = mycluster)
x <- foreach(i = 1:20) %dopar% {
nome_temp(palavras[[i]])
}
palavras[[i]]
tbl=palavras[[i]]
tabela <- table(tbl)
tabela <- data_frame(palavra = names(tabela), contagem = as.numeric(tabela))
tabela <- as.data.frame(t(tabela))
names(tabela) <- tabela[1,]
tabela <- tabela[-1,]
tabela <- data_frame(tabela)
nome_temp <- function(tbl){
tabela <- table(tbl)
tabela <- data_frame(palavra = names(tabela), contagem = as.numeric(tabela))
tabela <- as.data.frame(t(tabela))
names(tabela) <- tabela[1,]
tabela <- tabela[-1,]
tabela <- data_frame(tabela)
tabela
}
ncores <- parallel::detectCores() - 1
mycluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
doParallel::registerDoParallel(cl = mycluster)
x <- foreach(i = 1:20) %dopar% {
nome_temp(palavras[[i]])
}
x <- foreach(i = 1:20,
.combine = 'c') %dopar% {
nome_temp(palavras[[i]])
}
tabela <- table(tbl)
tabela <- data_frame(palavra = names(tabela), contagem = as.numeric(tabela))
tabela <- as.data.frame(t(tabela))
names(tabela) <- tabela[1,]
tabela <- tabela[-1,]
tabela <- data_frame(tabela)
tabela
nome_temp(palavras[[i]])
nome_temp(palavras[[i]])
x <- foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x <- foreach(
i = 1:100000000000000000,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x <- foreach(
i = 1:10000000,
.combine = 'c'
) %dopar% {
sqrt(i)
}
gc()
x <- foreach(
i = 1:10000,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x
x <- foreach(
i = 1:1000000,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x <- foreach(
i = 1:100000,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x <- foreach(
i = 1:100000,
.combine = 'c'
) %dopar% {
sqrt(i)
}
if (!require('plotly'))install.packages("plotly");library(plotly)
if (!require('randomcoloR'))install.packages("randomcoloR");library(randomcoloR)
if (!require('htmlwidgets'))install.packages("htmlwidgets");library(htmlwidgets)
if (!require("dplyr")) install.packages("dplyr");library(dplyr)
if (!require("plyr")) install.packages("plyr");library(plyr)
if (!require('dplyr'))install.packages("dplyr");library(dplyr)
if (!require('plotly'))install.packages("plotly");library(plotly)
if (!require('lubridate'))install.packages("lubridate");library(lubridate)
if (!require('readr'))install.packages("readr");library(readr)
if (!require('rgdal'))install.packages("rgdal");library(rgdal)
if (!require('stringr'))install.packages("stringr");library(stringr)
if (!require("deflateBR")) install.packages("deflateBR");library(deflateBR)
if (!require('sp'))install.packages('sp', dependencies=T);library(sp)
if (!require('rgeos'))install.packages("rgeos");library(rgeos)
if (!require('rbcb'))install.packages('rbcb');library(rbcb)
if (!require('sidrar'))install.packages('sidrar');library(sidrar)
if (!require('readr'))install.packages("readr");library(readr)
if (!require('zoo'))install.packages('zoo');library(zoo)
if (!require('reshape'))install.packages("reshape");library(reshape)
library(readr)
corporate <- read_delim("GitHub/MIM/dados/cretool/corporate.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(corporate)
summary(iris)
install.packages("sampling")
library(sampling)
amostrairis2 = strata(iris, c("Species"), size = c(25, 25, 25), method="srswor") #constante
summary(amostrairis2)
?strata
amostrairis2 = strata(iris, c("Species"), size = c(.5, .5, .5), method="srswor") #constante
data <- data.frame(Level = rep(c("freshers", "juniors", "mid-level", "Senior"), each=100),                 Score = rnorm(400, mean=45, sd=2.2))
data
stratified <- data %>%
group_by(Level) %>%
sample_n(size=10)
summary(iris)
set.seed(1)
n <- 1e4
d <- data.table(age = sample(1:5, n, T),
lc = rbinom(n, 1 , .5),
ants = rbinom(n, 1, .7))
if (!require("tidyverse")) install.packages("tidyverse");library(tidyverse)
if (!require("dplyr")) install.packages("dplyr");library(dplyr)
set.seed(1)
n <- 1e4
d <- data.table(age = sample(1:5, n, T),
lc = rbinom(n, 1 , .5),
ants = rbinom(n, 1, .7))
if (!require("plyr")) install.packages("plyr");library(plyr)
set.seed(1)
n <- 1e4
d <- data.table(age = sample(1:5, n, T),
lc = rbinom(n, 1 , .5),
ants = rbinom(n, 1, .7))
d <- data.frame(age = sample(1:5, n, T),
lc = rbinom(n, 1 , .5),
ants = rbinom(n, 1, .7))
d
install.packages("splitstackshape")
library(splitstackshape)
set.seed(1)
out <- stratified(d, c("age", "lc"), 30)
out <- stratified(d, c("age", "lc"), .10)
out <- stratified(d, c("age", "lc"), 10)
n <- 1e5
d <- data.frame(age = sample(1:5, n, T),
lc = rbinom(n, 1 , .5),
ants = rbinom(n, 1, .7))
library(splitstackshape)
set.seed(1)
out <- stratified(d, c("age", "lc"), 10)
out <- stratified(d, c("age", "lc"), 100)
out <- stratified(d, c("age", "lc"), 1)
out <- stratified(d, c("age", "lc"), 0.5)
out <- stratified(d, c("age", "lc"), 0.1)
100000*0,1
100000*0.1
n <- 2e5
d <- data.frame(age = sample(1:5, n, T),
lc = rbinom(n, 1 , .5),
ants = rbinom(n, 1, .7))
library(splitstackshape)
set.seed(1)
out <- stratified(d, c("age", "lc"), 0.1)
out <- stratified(d, c("age", "lc"), 0.5)
View(out)
mean(d$ants)
mean(out$ants)
n <- 2e10
d <- data.frame(age = sample(1:5, n, T),
lc = rbinom(n, 1 , .5),
ants = rbinom(n, 1, .7))
library(splitstackshape)
set.seed(1)
out <- stratified(d, c("age", "lc"), 0.1)
mean(d$ants)
mean(out$ants)
summary(d)
if(!require('basedosdados'))install.packages("basedosdados");library(basedosdados)
if(!require('usethis'))install.packages("usethis");library(usethis)
usethis::edit_r_environ()
set_billing_id(billing_project_id = "spry-scope-361714")
path <- file.path(paste0("microdados_vinculos_all.csv"))
bare_query <- paste0("SELECT ano, sigla_uf, id_municipio, count(*) as n_trabalhadores FROM basedosdados.br_me_rais.microdados_vinculos
WHERE vinculo_ativo_3112 = 1
GROUP BY ano, sigla_uf, id_municipio") #(cbo_1994 = '44130' or cbo_2002 = '354605')
download(query = bare_query, path = path)
library(readr)
microdados_vinculos_all <- read_csv("microdados_vinculos_all.csv")
View(microdados_vinculos_all)
if(!require('hpiR'))install.packages("hpiR");library(hpiR)
if(!require('tidyverse'))install.packages("tidyverse");library(tidyverse)
if(!require('plotly'))install.packages("plotly");library(plotly)
if(!require('lubridate'))install.packages("lubridate");library(lubridate)
if(!require('imputeTS'))install.packages("imputeTS");library(imputeTS)
if(!require('stargazer'))install.packages("stargazer");library(stargazer)
if(!require('readr'))install.packages("readr");library(readr)
if(!require('fastDummies'))install.packages("fastDummies");library(fastDummies)
if(!require('htmlwidgets'))install.packages("htmlwidgets");library(htmlwidgets)
setwd("~/GitHub/Dashes/HTMLs")
rm_accent <- function(x) iconv(x, to = "ASCII//TRANSLIT")
itbi <- read_csv("C:/Users/onurb/Downloads/geo_itbi_enriched.csv")
itbi = itbi %>%
filter(matricula_do_imovel > 0) %>%
filter(natureza_de_transacao == "1.Compra e venda") %>%
filter(valor_de_transacao_declarado_pelo_contribuinte  >= 15000) %>%
filter(valor_de_transacao_declarado_pelo_contribuinte  <= 15000000) %>%
filter(area_construida_m2 >= 15) %>%
filter(area_construida_m2 <= 1000)%>%
filter(data_de_transacao >= "2019-01-01")%>%
filter(descricao_do_padrao_iptu == "RESIDENCIAL VERTICAL")
# filter(descricao_do_padrao_iptu == "RESIDENCIAL HORIZONTAL")
# filter(descricao_do_padrao_iptu == "COMERCIAL VERTICAL")
# filter(descricao_do_padrao_iptu == "COMERCIAL HORIZONTAL")
itbi <- itbi[!itbi$valor_de_transacao_declarado_pelo_contribuinte == 0,]
itbi$valor_transcao_m2_construida <- itbi$valor_de_transacao_declarado_pelo_contribuinte/itbi$area_construida_m2
itbi <- itbi[!itbi$valor_transcao_m2_construida == 0,]
itbi <- itbi[!is.na(itbi$valor_transcao_m2_construida),]
names(itbi)[1] <- 'id'
itbi$id <- c(1:nrow(itbi))
itbi$matricula_do_imovel <- paste0(itbi$matricula_do_imovel,'-',itbi$complemento)
itbi$valor_transcao_m2_construida <- log(itbi$valor_transcao_m2_construida)
### Repeat Sales Index ###
hpi_rt = rtIndex(trans_df = itbi,
estimator = 'robust',
log_dep = TRUE,
trim_model = TRUE,
date = "data_de_transacao",
trans_id = "id",
prop_id = "matricula_do_imovel",
dep_var = 'price',
smooth = TRUE,
price = "valor_transcao_m2_construida",
periodicity = "monthly",
smooth_order = 3)
repeat_df = as.data.frame(do.call(cbind, hpi_rt$index))
repeat_df = repeat_df %>%
mutate(value = as.numeric(value)/100, smooth = as.numeric(smooth)/100)
plot_ly(x = repeat_df$numeric, y = repeat_df$smooth, name = 'Repeat Sales Index', type = 'scatter', mode = 'lines')
### Hedonic Index ###
hed = hedIndex(trans_df = itbi,
estimator = 'robust',
log_dep = TRUE,
trim_model = TRUE,
date = "data_de_transacao",
trans_id = "id",
prop_id = "matricula_do_imovel",
dep_var = "price",
ind_var = c('lat','lon','acc_iptu','area_construida_m2','SAD69_96_SHP_TEMA_ESPORTE_ESTADIO_distance_km','SAD69_96_SHP_TEMA_ESPORTE_OUTROS_distance_km','sad6996_terminal_onibus_distance_km'),
#,names(itbi)[35:(length(names(itbi))-1)]),
smooth = TRUE,
price = "valor_transcao_m2_construida",
periodicity = "monthly",
smooth_order = 3)
# Fixing data types
hed_df = as.data.frame(do.call(cbind, hed$index))
hed_df = hed_df %>%
mutate(value = as.numeric(value)/100, smooth = as.numeric(smooth)/100)
irf = rfIndex(trans_df = itbi,
log_dep = TRUE,
trim_model = TRUE,
smooth = TRUE,
date = "data_de_transacao",
trans_id = "id",
prop_id = "matricula_do_imovel",
dep_var = "price",
ind_var = c('lat','lon','acc_iptu','area_construida_m2','SAD69_96_SHP_TEMA_ESPORTE_ESTADIO_distance_km','SAD69_96_SHP_estacaometro_point_distance_km','SIRGAS_SHP_estacaotrem_point_distance_km'),
price = "valor_transcao_m2_construida",
periodicity = "monthly",
smooth_order = 3,
seed = 27)
irf_df = as.data.frame(do.call(cbind, irf$index))
irf_df = irf_df %>%
mutate(value = as.numeric(value)/100, smooth = as.numeric(smooth)/100)
fig <- plot_ly(x = repeat_df$numeric, y = repeat_df$smooth, name = 'Repeat Sales Index', type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(x = hed_df$numeric, y = hed_df$smooth, name = 'Hedonic Index', mode = 'lines+markers')
fig <- fig %>% add_trace(x = irf_df$numeric, y = irf_df$smooth, name = 'Random Forest Index', mode = 'lines+markers')
fig
acuracia_volatilidade = data.frame()
acuracia_volatilidade[1,'modelo'] <- 'repeat sales'
acuracia_volatilidade[1,'volatilidade'] <- calcVolatility(index = hpi_rt,window = 3,in_place = TRUE)$index$volatility$median
hpi_obj <- calcAccuracy(hpi_obj = hpi_rt,
test_method = 'insample',
test_type = 'rt',
in_place = TRUE,
in_place_name = 'is_accuracy')
acuracia_volatilidade[1,'acuracia_forecast_log'] <- abs(median(hpi_obj$index$is_accuracy$log_error))
acuracia_volatilidade[1,'acuracia_forecast_abs'] <- abs(median(hpi_obj$index$is_accuracy$error))
hpi_obj <- calcAccuracy(hpi_obj = hpi_rt,
test_method = 'kfold',
test_type = 'rt',
in_place = TRUE,
in_place_name = 'kf_accuracy')
acuracia_volatilidade[1,'acuracia_kfold_log'] <- abs(median(hpi_obj$index$kf_accuracy$log_error))
acuracia_volatilidade[1,'acuracia_kfold_abs'] <- abs(median(hpi_obj$index$kf_accuracy$error))
itbi_trans <- rtCreateTrans(trans_df = itbi,
prop_id = 'matricula_do_imovel',
trans_id = 'id',
price = 'valor_transcao_m2_construida',
date = 'data_de_transacao',
periodicity = 'monthly',
seq_only = TRUE,
min_period_dist = 12)
acuracia_volatilidade[2,'modelo'] <- 'hedonic price'
acuracia_volatilidade[2,'volatilidade'] <- calcVolatility(index = hed,window = 3,in_place = TRUE)$index$volatility$median
hpi_obj <- calcAccuracy(hpi_obj = hed,
test_method = 'insample',
test_type = 'rt',
pred_df = itbi_trans,
in_place = TRUE,
in_place_name = 'is_accuracy')
acuracia_volatilidade[2,'acuracia_forecast_log'] <- abs(median(hpi_obj$index$is_accuracy$log_error))
acuracia_volatilidade[2,'acuracia_forecast_abs'] <- abs(median(hpi_obj$index$is_accuracy$error))
hpi_obj <- calcAccuracy(hpi_obj = hed,
test_method = 'kfold',
test_type = 'rt',
pred_df = itbi_trans,
in_place = TRUE,
in_place_name = 'kf_accuracy')
acuracia_volatilidade[2,'acuracia_kfold_log'] <- abs(median(hpi_obj$index$kf_accuracy$log_error))
acuracia_volatilidade[2,'acuracia_kfold_abs'] <- abs(median(hpi_obj$index$kf_accuracy$error))
acuracia_volatilidade[3,'modelo'] <- 'random forest'
acuracia_volatilidade[3,'volatilidade'] <- calcVolatility(index = irf,window = 3,in_place = TRUE)$index$volatility$median
hpi_obj <- calcAccuracy(hpi_obj = irf,
test_method = 'insample',
test_type = 'rt',
pred_df = itbi_trans,
in_place = TRUE,
in_place_name = 'is_accuracy')
acuracia_volatilidade[3,'acuracia_forecast_log'] <- abs(median(hpi_obj$index$is_accuracy$log_error))
acuracia_volatilidade[3,'acuracia_forecast_abs'] <- abs(median(hpi_obj$index$is_accuracy$error))
hpi_obj <-calcAccuracy(hpi_obj = irf,
test_method = 'kfold',
test_type = 'rt',
pred_df = itbi_trans,
in_place = TRUE,
in_place_name = 'kf_accuracy')
acuracia_volatilidade[3,'acuracia_kfold_log'] <- abs(median(hpi_obj$index$kf_accuracy$log_error))
acuracia_volatilidade[3,'acuracia_kfold_abs'] <- abs(median(hpi_obj$index$kf_accuracy$error))
f1 <- plot_ly(
x = names(acuracia_volatilidade)[3:length(names(acuracia_volatilidade))], y = acuracia_volatilidade$modelo,
z = data.matrix(acuracia_volatilidade[3:ncol(acuracia_volatilidade)]), type = "heatmap", colors = colorRamp(c("green", "red"))
)
f2 <- plot_ly(
x = names(acuracia_volatilidade)[2], y = acuracia_volatilidade$modelo,
z = data.matrix(acuracia_volatilidade[2]), type = "heatmap", colors = colorRamp(c("green", "red"))
)
fig <- subplot(f1, f2)
fig
saveWidget(fig, file = "acuracia_itbi.html")
#
# if (!require("DBI")) install.packages("DBI");library(DBI)
# if (!require("bigrquery")) install.packages("bigrquery");library(bigrquery)
if (!require("survey")) install.packages("survey");library(survey)
if (!require("srvyr")) install.packages("srvyr");library(srvyr)
if (!require("convey")) install.packages("convey");library(convey)
if (!require("PNADcIBGE")) install.packages("PNADcIBGE");library(PNADcIBGE)
if (!require("forecast")) install.packages("forecast");library(forecast)
if (!require("readstata13")) install.packages("readstata13");library(readstata13)
if (!require("tidyverse")) install.packages("tidyverse");library(tidyverse)
if (!require("dplyr")) install.packages("dplyr");library(dplyr)
if (!require('reshape2'))install.packages("reshape2");library(reshape2)
df = data.frame()
for (i in 1985:2021){
for (q in 1:4){
options(survey.lonely.psu="certainty")
dadosPNADc <- get_pnadc(year= i, quarter= q)
dadosPNADc <- update(dadosPNADc, D_Idade = ifelse(coalesce((V2009 >= 14 & V2009 <= 65), FALSE), "Ativa", 'Inativa'))
# dadosPNADc <- update(dadosPNADc, codigo = case_when(as.numeric(strtrim(paste(V4010), 4)) == 3324 ~ 'Corretor imobiliário',
#                                                           as.numeric(strtrim(paste(V4010), 4)) == 3334 ~ 'Corretor imobiliário '))
dadosPNADc <- update(dadosPNADc, codigo = ifelse(coalesce(
(as.numeric(strtrim(paste(V4010), 4)) == 3324 |
as.numeric(strtrim(paste(V4010), 4)) == 3334), FALSE),
'Corretor imobiliário', 'outros'))
dadosPNADc <- update(dadosPNADc, D_Carteira_Assinada = ifelse(coalesce(
(VD4009 == "Trabalhador familiar auxiliar" |
VD4009 == "Trabalhador domostico sem carteira de trabalho assinada" |
VD4009 == "Empregado no setor privado sem carteira de trabalho assinada"), FALSE),
"Sem carteira assinada", 'Com carteira assinada/NA'))
dadosPNADc <- update(dadosPNADc, D_Regularizado = ifelse(coalesce(
(V4019 == "Nao" | V4046 == "Nao"), FALSE), 'Sem CNPJ', 'Formal'))
dadosPNADc <- update(dadosPNADc, D_Informal_Formal = ifelse(coalesce(
(D_Carteira_Assinada == "Sem carteira assinada" | D_Regularizado == "Sem CNPJ"), FALSE),
"Informal", 'Formal'))
df_pnad <- as.data.frame(
svytotal(~interaction(Ano, Trimestre, D_Informal_Formal, UF, codigo == 'Corretor imobiliário' & D_Idade == "Ativa" & VD4002 == "Pessoas ocupadas"),
design=dadosPNADc, na.rm=TRUE))
df_pnad$SE <- NULL
df_pnad <- cbind(index = rownames(df_pnad), df_pnad)
rownames(df_pnad) <- 1:nrow(df_pnad)
df_pnad$index <- str_sub(df_pnad$index, 137, str_length(df_pnad$index))
out <- strsplit(df_pnad$index, '[.]')
c <- as.data.frame(do.call(rbind, out))
names(c) <- c('ano','quater','regularidade','uf','bool_cod')
df_pnad <- cbind(df_pnad, c)
df_pnad <- df_pnad[df_pnad$bool_cod=='TRUE',]
df <- rbind(df, df_pnad)
}
}
for (i in 2010:2021){
for (q in 1:4){
options(survey.lonely.psu="certainty")
dadosPNADc <- get_pnadc(year= i, quarter= q)
dadosPNADc <- update(dadosPNADc, D_Idade = ifelse(coalesce((V2009 >= 14 & V2009 <= 65), FALSE), "Ativa", 'Inativa'))
# dadosPNADc <- update(dadosPNADc, codigo = case_when(as.numeric(strtrim(paste(V4010), 4)) == 3324 ~ 'Corretor imobiliário',
#                                                           as.numeric(strtrim(paste(V4010), 4)) == 3334 ~ 'Corretor imobiliário '))
dadosPNADc <- update(dadosPNADc, codigo = ifelse(coalesce(
(as.numeric(strtrim(paste(V4010), 4)) == 3324 |
as.numeric(strtrim(paste(V4010), 4)) == 3334), FALSE),
'Corretor imobiliário', 'outros'))
dadosPNADc <- update(dadosPNADc, D_Carteira_Assinada = ifelse(coalesce(
(VD4009 == "Trabalhador familiar auxiliar" |
VD4009 == "Trabalhador domostico sem carteira de trabalho assinada" |
VD4009 == "Empregado no setor privado sem carteira de trabalho assinada"), FALSE),
"Sem carteira assinada", 'Com carteira assinada/NA'))
dadosPNADc <- update(dadosPNADc, D_Regularizado = ifelse(coalesce(
(V4019 == "Nao" | V4046 == "Nao"), FALSE), 'Sem CNPJ', 'Formal'))
dadosPNADc <- update(dadosPNADc, D_Informal_Formal = ifelse(coalesce(
(D_Carteira_Assinada == "Sem carteira assinada" | D_Regularizado == "Sem CNPJ"), FALSE),
"Informal", 'Formal'))
df_pnad <- as.data.frame(
svytotal(~interaction(Ano, Trimestre, D_Informal_Formal, UF, codigo == 'Corretor imobiliário' & D_Idade == "Ativa" & VD4002 == "Pessoas ocupadas"),
design=dadosPNADc, na.rm=TRUE))
df_pnad$SE <- NULL
df_pnad <- cbind(index = rownames(df_pnad), df_pnad)
rownames(df_pnad) <- 1:nrow(df_pnad)
df_pnad$index <- str_sub(df_pnad$index, 137, str_length(df_pnad$index))
out <- strsplit(df_pnad$index, '[.]')
c <- as.data.frame(do.call(rbind, out))
names(c) <- c('ano','quater','regularidade','uf','bool_cod')
df_pnad <- cbind(df_pnad, c)
df_pnad <- df_pnad[df_pnad$bool_cod=='TRUE',]
df <- rbind(df, df_pnad)
}
}
for (i in 2012:2021){
for (q in 1:4){
options(survey.lonely.psu="certainty")
dadosPNADc <- get_pnadc(year= i, quarter= q)
dadosPNADc <- update(dadosPNADc, D_Idade = ifelse(coalesce((V2009 >= 14 & V2009 <= 65), FALSE), "Ativa", 'Inativa'))
# dadosPNADc <- update(dadosPNADc, codigo = case_when(as.numeric(strtrim(paste(V4010), 4)) == 3324 ~ 'Corretor imobiliário',
#                                                           as.numeric(strtrim(paste(V4010), 4)) == 3334 ~ 'Corretor imobiliário '))
dadosPNADc <- update(dadosPNADc, codigo = ifelse(coalesce(
(as.numeric(strtrim(paste(V4010), 4)) == 3324 |
as.numeric(strtrim(paste(V4010), 4)) == 3334), FALSE),
'Corretor imobiliário', 'outros'))
dadosPNADc <- update(dadosPNADc, D_Carteira_Assinada = ifelse(coalesce(
(VD4009 == "Trabalhador familiar auxiliar" |
VD4009 == "Trabalhador domostico sem carteira de trabalho assinada" |
VD4009 == "Empregado no setor privado sem carteira de trabalho assinada"), FALSE),
"Sem carteira assinada", 'Com carteira assinada/NA'))
dadosPNADc <- update(dadosPNADc, D_Regularizado = ifelse(coalesce(
(V4019 == "Nao" | V4046 == "Nao"), FALSE), 'Sem CNPJ', 'Formal'))
dadosPNADc <- update(dadosPNADc, D_Informal_Formal = ifelse(coalesce(
(D_Carteira_Assinada == "Sem carteira assinada" | D_Regularizado == "Sem CNPJ"), FALSE),
"Informal", 'Formal'))
df_pnad <- as.data.frame(
svytotal(~interaction(Ano, Trimestre, D_Informal_Formal, UF, codigo == 'Corretor imobiliário' & D_Idade == "Ativa" & VD4002 == "Pessoas ocupadas"),
design=dadosPNADc, na.rm=TRUE))
df_pnad$SE <- NULL
df_pnad <- cbind(index = rownames(df_pnad), df_pnad)
rownames(df_pnad) <- 1:nrow(df_pnad)
df_pnad$index <- str_sub(df_pnad$index, 137, str_length(df_pnad$index))
out <- strsplit(df_pnad$index, '[.]')
c <- as.data.frame(do.call(rbind, out))
names(c) <- c('ano','quater','regularidade','uf','bool_cod')
df_pnad <- cbind(df_pnad, c)
df_pnad <- df_pnad[df_pnad$bool_cod=='TRUE',]
df <- rbind(df, df_pnad)
}
}
