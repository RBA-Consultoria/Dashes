axis.line=element_blank(),
axis.text.x=element_blank(), axis.title.x=element_blank(),
axis.text.y=element_blank(), axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.background = element_blank()) # Clean Everything
xlim = ggplot_build(map)$layout$panel_scales_x[[1]]$range$range
ylim = ggplot_build(map)$layout$panel_scales_y[[1]]$range$range
map
ggsave('~/GitHub/MIM/dados/Rplot.png', width = diff(xlim)*40, height = diff(ylim)*40, units = "cm")
img_map = readPNG('~/GitHub/MIM/dados/Rplot.png')
# 2D Plot
map_density = ggplot(temp2[which(temp2$units>1),]) +
annotation_custom(rasterGrob(img_map, width=unit(1,"npc"), height=unit(1,"npc"))) +
xlim(xlim[1],xlim[2]) + # x-axis Mapping
ylim(ylim[1],ylim[2]) + # y-axis Mapping
geom_point(aes(x=lon, y=lat, color=units), size=1) + # Points
scale_colour_gradient(name = '????????????(???)\n(HKD)',
limits=range(temp2$units),
low="#FCB9B2", high="#B23A48") + # Price Density Color
theme(axis.line=element_blank(),
axis.text.x=element_blank(), axis.title.x=element_blank(),
axis.text.y=element_blank(), axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.background = element_blank()) # Clean Everything
plot_gg(map_density, multicore = TRUE, width = diff(xlim)*10 ,height=diff(ylim)*10, fov = 70, scale = 300)
# Windows Size Setting
par3d(windowRect = c(0, 0, diff(xlim) * 2000, diff(ylim) * 2000))
# Render Image
render_camera(fov = 120, zoom = 0.3, theta = 10, phi = 50)
render_depth(focus = 0.2, focallength = 5)
ggsave(paste0('~/GitHub/MIM/dados/map_',i,'.png'), width = diff(xlim)*40, height = diff(ylim)*40, units = "cm")
# Render Video
# Video 1
phivechalf = 30 + 60 * 1/(1 + exp(seq(-7, 20, length.out = 180)/2))
phivecfull = c(phivechalf, rev(phivechalf))
thetavec = 0 + 45 * sin(seq(0,359,length.out = 360) * pi/180)
zoomvec = 0.45 + 0.2 * 1/(1 + exp(seq(-5, 20, length.out = 180)))
zoomvecfull = c(zoomvec, rev(zoomvec))
render_movie(filename = paste0('~/GitHub/MIM/dados/video_',i), type = "custom", frames = 360,  phi = phivecfull, zoom = zoomvecfull, theta = thetavec)
# # Video 2
# transition_values <- function(from, to, steps = 10, one_way = FALSE, type = "cos") {
#   if (!(type %in% c("cos", "lin"))){stop("type must be one of: 'cos', 'lin'")}
#   range <- c(from, to)
#   middle <- mean(range)
#   half_width <- diff(range)/2
#   if (type == "cos") {scaling <- cos(seq(0, 2*pi / ifelse(one_way, 2, 1), length.out = steps))}
#   else if (type == "lin"){
#     if (one_way) {xout <- seq(1, -1, length.out = steps)}
#     else {xout <- c(seq(1, -1, length.out = floor(steps/2)), seq(-1, 1, length.out = ceiling(steps/2)))}
#     scaling <- approx(x = c(-1, 1), y = c(-1, 1), xout = xout)$y }
#   middle - half_width * scaling
# }
# theta <- transition_values(from = 0, to = 360, steps = 360, one_way = TRUE, type = "lin")
# phi <- transition_values(from = 10, to = 70, steps = 360, one_way = FALSE, type = "cos")
# zoom <- transition_values(from = 0.4, to = 0.8, steps = 360, one_way = FALSE, type = "cos")
# render_movie(filename = '~/GitHub/MIM/dados/output2', type = "custom", frames = 360,  phi = phi, zoom = zoom, theta = theta)
#
# Close Windows
rgl.close()
}
ggsave(paste0('~/GitHub/MIM/dados/map_',i,'.png'), width = diff(xlim)*40, height = diff(ylim)*40, units = "cm")
if (!require('raster'))install.packages("raster");library(raster)
if (!require('rgdal'))install.packages("rgdal");library(rgdal)
if (!require("dplyr")) install.packages("dplyr");library(dplyr)
if (!require("plyr")) install.packages("plyr");library(plyr)
if (!require('rgdal'))install.packages("rgdal");library(rgdal)
if (!require('sp'))install.packages('sp', dependencies=T);library(sp)
if (!require('rgeos'))install.packages("rgeos");library(rgeos)
if (!require('readr'))install.packages("readr");library(readr)
if (!require('rayshader'))install.packages("rayshader");library(rayshader)
if (!require('ggplot2'))install.packages("ggplot2");library(ggplot2)
if (!require('png'))install.packages("png");library(png)
if (!require('grid'))install.packages("grid");library(grid)
if (!require('rgl'))install.packages("rgl");library(rgl)
geo_bairro <- function(df){
shapefile <- readOGR(dsn="~/GitHub/MIM/dados/shp/DISTRITO_MUNICIPAL_SP_SMDUPolygon.shp", layer="DISTRITO_MUNICIPAL_SP_SMDUPolygon")
shapefile <- spTransform(shapefile, CRS("+proj=longlat +datum=WGS84"))
df_temp <- subset(df, select = c("lat","lon"))
df_temp <- subset(df_temp,!is.na(df_temp$lat))
coordinates(df_temp)<-c("lon","lat")
proj4string(df_temp) <- proj4string(shapefile)
df <- cbind(df,over(df_temp, shapefile))
return(df)
}
trunc_dec <- function(x, ..., prec = 0) base::trunc(x * 10^prec, ...) / 10^prec;
for(i in c(1995:2022)){
geo_eg <- read_csv(paste0('B:/Data/geo_eg_',i,'.csv'))
geo_eg <- subset(geo_eg,!is.na(geo_eg$lat))
geo_eg <- geo_bairro(geo_eg)
temp <- geo_eg %>% dplyr::group_by(Nome) %>%
dplyr::summarise(units = n(), .groups = "drop" )
names(temp) <- tolower(names(temp))
geo_eg$lon <- trunc_dec(geo_eg$lon, prec = 2)
geo_eg$lat <- trunc_dec(geo_eg$lat, prec = 2)
temp2 <- geo_eg %>% dplyr::group_by(lon, lat) %>%
dplyr::summarise(units = n(), .groups = "drop" )
names(temp2) <- tolower(names(temp2))
caminho_shp_zv = "~/GitHub/MIM/dados/shp/DISTRITO_MUNICIPAL_SP_SMDUPolygon.shp"
states = readOGR(dsn = caminho_shp_zv, layer = "DISTRITO_MUNICIPAL_SP_SMDUPolygon", encoding = "utf-8",stringsAsFactors=FALSE)
map_data = data.frame(id=states$Codigo, nome=states$Nome)
states = fortify(states)
map_data = merge(states, map_data, by="id")
map_data = merge(map_data, temp, by="nome")
# Map
map = ggplot(map_data, aes(long, lat, group=group, fill = units)) +
geom_polygon() + # Shape
scale_fill_gradient(limits=range(map_data$units),
low="#FFF3B0", high="#E09F3E") + # Population Density Color
layer(geom="path", stat="identity", position="identity",
mapping=aes(x=long, y=lat, group=group,
color=I('#FFFFFF'))) # Boarder Color
map = map + theme(legend.position = "none",
axis.line=element_blank(),
axis.text.x=element_blank(), axis.title.x=element_blank(),
axis.text.y=element_blank(), axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.background = element_blank()) # Clean Everything
xlim = ggplot_build(map)$layout$panel_scales_x[[1]]$range$range
ylim = ggplot_build(map)$layout$panel_scales_y[[1]]$range$range
map
ggsave('~/GitHub/MIM/dados/Rplot.png', width = diff(xlim)*40, height = diff(ylim)*40, units = "cm")
img_map = readPNG('~/GitHub/MIM/dados/Rplot.png')
# 2D Plot
map_density = ggplot(temp2[which(temp2$units>1),]) +
annotation_custom(rasterGrob(img_map, width=unit(1,"npc"), height=unit(1,"npc"))) +
xlim(xlim[1],xlim[2]) + # x-axis Mapping
ylim(ylim[1],ylim[2]) + # y-axis Mapping
geom_point(aes(x=lon, y=lat, color=units), size=1) + # Points
scale_colour_gradient(name = paste0("      Evolução Imóveis - SP\n      ",as.character(i)),
limits=range(temp2$units),
low="#FCB9B2", high="#B23A48") + # Price Density Color
theme(axis.line=element_blank(),
axis.text.x=element_blank(), axis.title.x=element_blank(),
axis.text.y=element_blank(), axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.background = element_blank()) # Clean Everything
plot_gg(map_density, multicore = TRUE, width = diff(xlim)*15 ,height=diff(ylim)*10, fov = 70, scale = 300)
# Windows Size Setting
par3d(windowRect = c(0, 0, diff(xlim) * 2000, diff(ylim) * 2500))
# Render Image
render_camera(fov = 120, zoom = 0.3, theta = 20, phi = 45)
render_depth(focus = 0.8, focallength = 1)
render_snapshot(paste0('~/GitHub/MIM/dados/map_',i,'.png'), clear = TRUE)
# Render Video
# Video 1
phivechalf = 30 + 60 * 1/(1 + exp(seq(-7, 20, length.out = 180)/2))
phivecfull = c(phivechalf, rev(phivechalf))
thetavec = 0 + 45 * sin(seq(0,359,length.out = 360) * pi/180)
zoomvec = 0.45 + 0.2 * 1/(1 + exp(seq(-5, 20, length.out = 180)))
zoomvecfull = c(zoomvec, rev(zoomvec))
render_movie(filename = paste0('~/GitHub/MIM/dados/video_',i), type = "custom", frames = 360,  phi = phivecfull, zoom = zoomvecfull, theta = thetavec)
# # Video 2
# transition_values <- function(from, to, steps = 10, one_way = FALSE, type = "cos") {
#   if (!(type %in% c("cos", "lin"))){stop("type must be one of: 'cos', 'lin'")}
#   range <- c(from, to)
#   middle <- mean(range)
#   half_width <- diff(range)/2
#   if (type == "cos") {scaling <- cos(seq(0, 2*pi / ifelse(one_way, 2, 1), length.out = steps))}
#   else if (type == "lin"){
#     if (one_way) {xout <- seq(1, -1, length.out = steps)}
#     else {xout <- c(seq(1, -1, length.out = floor(steps/2)), seq(-1, 1, length.out = ceiling(steps/2)))}
#     scaling <- approx(x = c(-1, 1), y = c(-1, 1), xout = xout)$y }
#   middle - half_width * scaling
# }
# theta <- transition_values(from = 0, to = 360, steps = 360, one_way = TRUE, type = "lin")
# phi <- transition_values(from = 10, to = 70, steps = 360, one_way = FALSE, type = "cos")
# zoom <- transition_values(from = 0.4, to = 0.8, steps = 360, one_way = FALSE, type = "cos")
# render_movie(filename = '~/GitHub/MIM/dados/output2', type = "custom", frames = 360,  phi = phi, zoom = zoom, theta = theta)
#
# Close Windows
rgl.close()
}
if (!require('raster'))install.packages("raster");library(raster)
if (!require('rgdal'))install.packages("rgdal");library(rgdal)
if (!require("dplyr")) install.packages("dplyr");library(dplyr)
if (!require("plyr")) install.packages("plyr");library(plyr)
if (!require('rgdal'))install.packages("rgdal");library(rgdal)
if (!require('sp'))install.packages('sp', dependencies=T);library(sp)
if (!require('rgeos'))install.packages("rgeos");library(rgeos)
if (!require('readr'))install.packages("readr");library(readr)
if (!require('rayshader'))install.packages("rayshader");library(rayshader)
if (!require('ggplot2'))install.packages("ggplot2");library(ggplot2)
if (!require('png'))install.packages("png");library(png)
if (!require('grid'))install.packages("grid");library(grid)
if (!require('rgl'))install.packages("rgl");library(rgl)
geo_bairro <- function(df){
shapefile <- readOGR(dsn="~/GitHub/MIM/dados/shp/DISTRITO_MUNICIPAL_SP_SMDUPolygon.shp", layer="DISTRITO_MUNICIPAL_SP_SMDUPolygon")
shapefile <- spTransform(shapefile, CRS("+proj=longlat +datum=WGS84"))
df_temp <- subset(df, select = c("lat","lon"))
df_temp <- subset(df_temp,!is.na(df_temp$lat))
coordinates(df_temp)<-c("lon","lat")
proj4string(df_temp) <- proj4string(shapefile)
df <- cbind(df,over(df_temp, shapefile))
return(df)
}
trunc_dec <- function(x, ..., prec = 0) base::trunc(x * 10^prec, ...) / 10^prec;
for(i in c(1995:2022)){
geo_eg <- read_csv(paste0('B:/Data/geo_eg_',i,'.csv'))
geo_eg <- subset(geo_eg,!is.na(geo_eg$lat))
geo_eg <- geo_bairro(geo_eg)
temp <- geo_eg %>% dplyr::group_by(Nome) %>%
dplyr::summarise(units = n(), .groups = "drop" )
names(temp) <- tolower(names(temp))
geo_eg$lon <- trunc_dec(geo_eg$lon, prec = 2)
geo_eg$lat <- trunc_dec(geo_eg$lat, prec = 2)
temp2 <- geo_eg %>% dplyr::group_by(lon, lat) %>%
dplyr::summarise(units = n(), .groups = "drop" )
names(temp2) <- tolower(names(temp2))
caminho_shp_zv = "~/GitHub/MIM/dados/shp/DISTRITO_MUNICIPAL_SP_SMDUPolygon.shp"
states = readOGR(dsn = caminho_shp_zv, layer = "DISTRITO_MUNICIPAL_SP_SMDUPolygon", encoding = "utf-8",stringsAsFactors=FALSE)
map_data = data.frame(id=states$Codigo, nome=states$Nome)
states = fortify(states)
map_data = merge(states, map_data, by="id")
map_data = merge(map_data, temp, by="nome")
# Map
map = ggplot(map_data, aes(long, lat, group=group, fill = units)) +
geom_polygon() + # Shape
scale_fill_gradient(limits=range(map_data$units),
low="#FFF3B0", high="#E09F3E") + # Population Density Color
layer(geom="path", stat="identity", position="identity",
mapping=aes(x=long, y=lat, group=group,
color=I('#FFFFFF'))) # Boarder Color
map = map + theme(legend.position = "none",
axis.line=element_blank(),
axis.text.x=element_blank(), axis.title.x=element_blank(),
axis.text.y=element_blank(), axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.background = element_blank()) # Clean Everything
xlim = ggplot_build(map)$layout$panel_scales_x[[1]]$range$range
ylim = ggplot_build(map)$layout$panel_scales_y[[1]]$range$range
map
ggsave('~/GitHub/MIM/dados/Rplot.png', width = diff(xlim)*40, height = diff(ylim)*40, units = "cm")
img_map = readPNG('~/GitHub/MIM/dados/Rplot.png')
# 2D Plot
map_density = ggplot(temp2[which(temp2$units>1),]) +
annotation_custom(rasterGrob(img_map, width=unit(1,"npc"), height=unit(1,"npc"))) +
xlim(xlim[1],xlim[2]) + # x-axis Mapping
ylim(ylim[1],ylim[2]) + # y-axis Mapping
geom_point(aes(x=lon, y=lat, color=units), size=1) + # Points
scale_colour_gradient(name = paste0("      Evolução Imóveis - SP\n      ",as.character(i)),
limits=range(temp2$units),
low="#FCB9B2", high="#B23A48") + # Price Density Color
theme(axis.line=element_blank(),
axis.text.x=element_blank(), axis.title.x=element_blank(),
axis.text.y=element_blank(), axis.title.y=element_blank(),
axis.ticks=element_blank(),
panel.background = element_blank()) # Clean Everything
plot_gg(map_density, multicore = TRUE, width = diff(xlim)*15 ,height=diff(ylim)*10, fov = 70, scale = 300)
par3d(windowRect = c(0, 0, diff(xlim) * 2000, diff(ylim) * 2500))
# Render Image
render_camera(fov = 120, zoom = 0.3, theta = 20, phi = 45)
render_depth(focus = 0.8, focallength = 1)
render_snapshot(paste0('~/GitHub/MIM/dados/map_',i,'.png'), clear = TRUE)
plot_gg(map_density, multicore = TRUE, width = diff(xlim)*15 ,height=diff(ylim)*10, fov = 70, scale = 300)
par3d(windowRect = c(0, 0, diff(xlim) * 2000, diff(ylim) * 2500))
# Render Video
# Video 1
phivechalf = 30 + 60 * 1/(1 + exp(seq(-7, 20, length.out = 180)/2))
phivecfull = c(phivechalf, rev(phivechalf))
thetavec = 0 + 45 * sin(seq(0,359,length.out = 360) * pi/180)
zoomvec = 0.45 + 0.2 * 1/(1 + exp(seq(-5, 20, length.out = 180)))
zoomvecfull = c(zoomvec, rev(zoomvec))
render_movie(filename = paste0('~/GitHub/MIM/dados/video_',i), type = "custom", frames = 360,  phi = phivecfull, zoom = zoomvecfull, theta = thetavec)
# # Video 2
# transition_values <- function(from, to, steps = 10, one_way = FALSE, type = "cos") {
#   if (!(type %in% c("cos", "lin"))){stop("type must be one of: 'cos', 'lin'")}
#   range <- c(from, to)
#   middle <- mean(range)
#   half_width <- diff(range)/2
#   if (type == "cos") {scaling <- cos(seq(0, 2*pi / ifelse(one_way, 2, 1), length.out = steps))}
#   else if (type == "lin"){
#     if (one_way) {xout <- seq(1, -1, length.out = steps)}
#     else {xout <- c(seq(1, -1, length.out = floor(steps/2)), seq(-1, 1, length.out = ceiling(steps/2)))}
#     scaling <- approx(x = c(-1, 1), y = c(-1, 1), xout = xout)$y }
#   middle - half_width * scaling
# }
# theta <- transition_values(from = 0, to = 360, steps = 360, one_way = TRUE, type = "lin")
# phi <- transition_values(from = 10, to = 70, steps = 360, one_way = FALSE, type = "cos")
# zoom <- transition_values(from = 0.4, to = 0.8, steps = 360, one_way = FALSE, type = "cos")
# render_movie(filename = '~/GitHub/MIM/dados/output2', type = "custom", frames = 360,  phi = phi, zoom = zoom, theta = theta)
#
# Close Windows
rgl.close()
}
if (!require('plotly'))install.packages("plotly");library(plotly)
if (!require('randomcoloR'))install.packages("randomcoloR");library(randomcoloR)
if (!require('htmlwidgets'))install.packages("htmlwidgets");library(htmlwidgets)
if (!require("dplyr")) install.packages("dplyr");library(dplyr)
if (!require("plyr")) install.packages("plyr");library(plyr)
if (!require('dplyr'))install.packages("dplyr");library(dplyr)
if (!require('plotly'))install.packages("plotly");library(plotly)
if (!require('lubridate'))install.packages("lubridate");library(lubridate)
if (!require('readr'))install.packages("readr");library(readr)
if (!require('rgdal'))install.packages("rgdal");library(rgdal)
if (!require('stringr'))install.packages("stringr");library(stringr)
if (!require("deflateBR")) install.packages("deflateBR");library(deflateBR)
if (!require('sp'))install.packages('sp', dependencies=T);library(sp)
if (!require('rgeos'))install.packages("rgeos");library(rgeos)
if (!require('rbcb'))install.packages('rbcb');library(rbcb)
if (!require('sidrar'))install.packages('sidrar');library(sidrar)
if (!require('readr'))install.packages("readr");library(readr)
if (!require('zoo'))install.packages('zoo');library(zoo)
if (!require('reshape'))install.packages("reshape");library(reshape)
setwd("~/GitHub/Dashes/HTMLs")
if (file.exists("~/GitHub/MIM/dados/dados_censo.RData")) {
load("~/GitHub/MIM/dados/dados_censo.RData")
} else {
source("~/GitHub/MIM/censo_pnad.R")
}
rm_accent <- function(x) iconv(x, to = "ASCII//TRANSLIT")
graph_func <- function(df, title_graph){
fig <- plot_ly()
steps <- list()
n <- 1
n2 <- length(origem)
s <- 1
for(ano in anos){
c<-1
for(o in origem){
fig <- fig %>% add_trace(x=df$localidade.nome,
y=df[,paste0('serie.',ano,'.',tolower(gsub(" ","_",rm_accent(o))))],
type='bar',visible=(ano==2001), name=gsub("_"," ",o),
marker = list(color = cor[c]))
c<-c+1
}
step <- list(args = list('visible', rep(FALSE, length(anos)*length(origem))),
method = 'restyle',
label = ano)
step$args[[2]][n:(n+n2-1)] = TRUE
n <- n+n2
steps[[s]] = step
s <- s+1
}
fig <- fig %>% layout(barmode = 'stack',
xaxis = list(title = "Origem"),
yaxis = list(title =""),
legend=list(title=list(text='          Destino')))
fig <- fig %>% layout(title = title_graph,
sliders = list(
list(
active = 0,
currentvalue = list(prefix = "Ano: "),
pad = list(t = 75),
steps = steps)))
return(fig)
}
geo_bairro <- function(df){
shapefile <- readOGR(dsn="~/GitHub/MIM/dados/shp/", layer="DISTRITO_MUNICIPAL_SP_SMDUPolygon")
shapefile <- spTransform(shapefile, CRS("+proj=longlat +datum=WGS84"))
df_temp <- subset(df, select = c("lat","lon"))
df_temp <- subset(df_temp,!is.na(df_temp$lat))
coordinates(df_temp)<-c("lon","lat")
proj4string(df_temp) <- proj4string(shapefile)
df <- cbind(df,over(df_temp, shapefile))
return(df)
}
transacao_tipologia_graph <- function(df, descricao){
temp <- df |> filter(descricao_padrao %in% c(descricao) &
ano_transac > 2018 & date_transac < today() &
idade_imob > 0 & garagem == 'FALSE' &
r_prop_transmitida == 'Total') |>
dplyr::group_by(date_transac,r_area_total) |>
dplyr::summarise(units = sum(unit))
updatemenus <- list(
list(
active = 6,
buttons = list(
list(
label = "Até 45m²",
method = "update",
args = list(list(visible = c(TRUE,FALSE,FALSE,FALSE,FALSE,FALSE)),
list(title = "Até 45m²"))),
list(
label = "De 45m² a 65m²",
method = "update",
args = list(list(visible = c(FALSE,TRUE,FALSE,FALSE,FALSE,FALSE)),
list(title = "De 45m² a 65m²"))),
list(
label = "De 65m² a 85m²",
method = "update",
args = list(list(visible = c(FALSE,FALSE,TRUE,FALSE,FALSE,FALSE)),
list(title = "De 65m² a 85m²"))),
list(
label = "De 85m² a 120m²",
method = "update",
args = list(list(visible = c(FALSE,FALSE,FALSE,TRUE,FALSE,FALSE)),
list(title = "De 85m² a 120m²"))),
list(
label = "De 120m² a 200m²",
method = "update",
args = list(list(visible = c(FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)),
list(title ="De 120m² a 200m²"))),
list(
label = "Maior 200m²",
method = "update",
args = list(list(visible = c(FALSE,FALSE,FALSE,FALSE,FALSE,TRUE)),
list(title = "Maior 200m²"))),
list(
label = "All",
method = "update",
args = list(list(visible = c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE)),
list(title = paste0("Total Transacionados por Tipologia (",tools::toTitleCase(tolower(descricao)),")"))))
)
)
)
temp <- cast(temp, date_transac ~ r_area_total)
names(temp) <- rm_accent(tolower(gsub(' ','_',names(temp))))
fig <- temp |> plot_ly(x=~date_transac , y=~ate_45m2 , name="Até 45m²",line = list(width = 4), marker = list(size = 8), type = 'scatter', mode = 'lines+markers') |>
add_lines(x=~date_transac , y=~de_45m2_a_65m2 , name="De 45m² a 65m²", line = list(width = 4), marker = list(size = 8)) |>
add_lines(x=~date_transac , y=~de_65m2_a_85m2 , name="De 65m² a 85m²", line = list(width = 4), marker = list(size = 8)) |>
add_lines(x=~date_transac , y=~de_85m2_a_120m2 , name="De 85m² a 120m²", line = list(width = 4), marker = list(size = 8)) |>
add_lines(x=~date_transac , y=~de_120m2_a_200m2 , name="De 120m² a 200m²", line = list(width = 4), marker = list(size = 8)) |>
add_lines(x=~date_transac , y=~maior_200m2, name="Maior 200m²", line = list(width = 4), marker = list(size = 8)) |>
layout(title = paste0("Total Transacionados por Tipologia (",tools::toTitleCase(tolower(descricao)),")"), showlegend=T,
xaxis=list(title="Ano de Transação <br> <sup>Fonte: ITBI-SP. Nota: desconsidera a Descrição de Uso garagem que é agregada na Descrição Padrão do IPTU</sup>"),
yaxis=list(title="Total de Transações"),
updatemenus=updatemenus)
return(fig)
}
transacao_bairro_graph <- function(df,descricao){
temp <- df |> filter(descricao_padrao %in% c(descricao) &
ano_transac > 2018 & date_transac < today() &
idade_imob > 0 & garagem == 'FALSE' &
r_prop_transmitida == 'Total') |>
dplyr::group_by(date_transac,shp_bairro)|>
dplyr::summarise(units = sum(unit))
updatemenus <- list(
list(
active = 0,
buttons = list()
)
)
bairros <- unique(temp$shp_bairro)[!is.na(unique(temp$shp_bairro))]
updatemenus[[1]][["buttons"]][[1]] <- list(label = "All",
method = "update",
args = list(list(visible = rep(TRUE, length(bairros))),
list(title = paste0("Total de Apartamentos Transacionados por Região (",tools::toTitleCase(tolower(descricao)),")"))))
for(indice in bairros){
aux <- temp[which(temp$shp_bairro==indice),]
log_list <- rep(FALSE, length(bairros))
log_list[which(bairros==indice)] <- TRUE
updatemenus[[1]][["buttons"]][[which(bairros==indice)+1]] <- list(label = indice,
method = "restyle",
args = list(list(visible = log_list),
list(title = indice)))
if(which(bairros==indice) == 1){
fig <- plot_ly(x=aux$date_transac , y=aux$units , name=indice,
line = list(width = 4), marker = list(size = 8),type = 'scatter', mode = 'lines+markers')
}else{
fig <- fig |> add_lines(x=aux$date_transac , y=aux$units , name=indice,line = list(width = 4), marker = list(size = 8))
}
}
fig <- fig |> layout(title = paste0("Total Transacionados por Região (",tools::toTitleCase(tolower(descricao)),")"), showlegend=T,
xaxis=list(title="Ano de Transação <br> <sup>Fonte: ITBI-SP. Nota: desconsidera a Descrição de Uso garagem que é agregada na Descrição Padrão do IPTU</sup>"),
yaxis=list(title="Total de Transações"),
updatemenus=updatemenus)
return(fig)
}
transacao_rua_graph <- function(df, descricao){
temp <- df %>% filter(descricao_padrao %in% c(descricao) &
ano_transac > 2018 & date_transac < today() &
idade_imob > 0 & garagem == 'FALSE' &
r_prop_transmitida == 'Total'&
ano_construcao <= 2022) %>%
dplyr::mutate(rua_bairro = paste(rua,"-",shp_bairro)) %>%
dplyr::group_by(descricao_padrao,rua_bairro) %>%
dplyr::summarise(units = n(), .groups = 'drop')
temp <- temp[which(temp$descricao_padrao==descricao),]
temp <- temp[order(temp$units, decreasing = T)[1:15],]
ls_factor <- unique(temp$rua_bairro)
temp$rua_bairro <- factor(temp$rua_bairro, levels = ls_factor)
fig <- plot_ly(temp[which(temp$descricao_padrao==descricao),],x=~rua_bairro , y=~units, name=indice, type = "bar") |>
layout(title = paste0("Total de Transacionados por Rua"), showlegend=T,
xaxis=list(title="Nome do Logradouro/Bairro <br> <sup>Fonte: ITBI-SP. Nota: desconsidera a Descrição de Uso garagem que é agregada na Descrição Padrão do IPTU</sup>"),
yaxis=list(title="Total de Transações"),barmode = 'stack')
return(fig)
}
transacao_liq_graph <- function(df,descricao,geo_eg_2022){
temp <- df |> filter(descricao_padrao %in% c(descricao) &
ano_transac > 2018 & date_transac < today() &
idade_imob > 0 & garagem == 'FALSE' &
r_prop_transmitida == 'Total'&
ano_construcao <= 2022) |>
dplyr::group_by(shp_bairro ) |>
dplyr::summarise(units = n(), .groups = "drop" )
temp2 <- geo_eg_2022 |>
dplyr::mutate(shp_bairro=Nome) |>
dplyr::group_by(shp_bairro ) |>
dplyr::summarise(units = n(), .groups = "drop" )
df_itbi_iptu <- merge(temp, temp2, by.x = "shp_bairro", by.y = "shp_bairro", all.x = TRUE, all.y = FALSE)
names(df_itbi_iptu)<-c("shp_bairro","units_itbi","units_iptu")
df_itbi_iptu$liq <- (df_itbi_iptu$units_itbi/df_itbi_iptu$units_iptu)*100
df_itbi_iptu <- df_itbi_iptu[order(df_itbi_iptu$liq, decreasing = T)[1:15],]
ls_factor <- unique(df_itbi_iptu$shp_bairro)
df_itbi_iptu$shp_bairro <- factor(df_itbi_iptu$shp_bairro, levels = ls_factor)
fig <- plot_ly(df_itbi_iptu,x=~shp_bairro  , y=~liq, name=descricao, type = "bar") |>
layout(title = paste0("Bairros mais Líquidos (Transações/Estoque)"), showlegend=T,
xaxis=list(title="Nome do Bairro <br> <sup>Fonte: ITBI-SP e IPTU-SP</sup>"),
yaxis=list(title="Liquidez (%)"),barmode = 'stack')
return(fig)
}
df_itbi <- data.frame() # stacking ITBI
ls_itbi <- list.files(path = "~/GitHub/MIM/dados/ITBI/")
ls_itbi <- ls_itbi[startsWith(ls_itbi,'geo')]
for(indice_itbi in ls_itbi){
temp <- read_delim(paste0("~/GitHub/MIM/dados/ITBI/",indice_itbi),
escape_double = FALSE, na = "NA", trim_ws = TRUE)
df_itbi <- rbind(df_itbi,temp)
}
df_itbi <- geo_bairro(df_itbi)
df_itbi <- subset(df_itbi,!is.na(df_itbi$lat))
df_itbi <- geo_bairro(df_itbi)
